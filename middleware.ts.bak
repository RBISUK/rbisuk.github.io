import type { NextRequest } from "next/server";
import { NextResponse } from "next/server";

const REALM = "RBIS Admin";

function unauthorized() {
  return new NextResponse("Unauthorized", {
    status: 401,
    headers: { "WWW-Authenticate": `Basic realm="${REALM}", charset="UTF-8"` },
  });
}

export function middleware(req: NextRequest) {
  const p = req.nextUrl.pathname;
  const protect =
    p.startsWith("/veridex/admin") || p.startsWith("/api/admin");

  if (!protect) return NextResponse.next();

  // Optional IP allowlist
  const allow = (process.env.ADMIN_ALLOWLIST_IPS ?? "")
    .split(",")
    .map(s => s.trim())
    .filter(Boolean);
  const ip =
    req.ip ?? req.headers.get("x-forwarded-for")?.split(",")[0]?.trim();
  if (allow.length && ip && !allow.includes(ip)) {
    return new NextResponse("Forbidden", { status: 403 });
  }

  const hdr = req.headers.get("authorization");
  if (!hdr?.startsWith("Basic ")) return unauthorized();

  const [user, pass] = atob(hdr.slice(6)).split(":");
  if (user !== process.env.ADMIN_USER || pass !== process.env.ADMIN_PASS) {
    return unauthorized();
  }

  return NextResponse.next();
}

export const config = {
  matcher: ["/veridex/admin/:path*", "/api/admin/:path*"],
};
